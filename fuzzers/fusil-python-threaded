#!/usr/bin/env python
"""
Fusil Python Fuzzer

A Python fuzzer based on the fusil fuzzing framework for testing Python modules
by generating random function and method calls with diverse argument types.
This fuzzer targets Python modules to discover crashes and other issues through
exploration of API surfaces.

Key Features:
- Discovery and filtering of Python modules (stdlib, site-packages, C-only)
- Generation of complex arguments, including edge cases and malformed data
- Thread-based and async execution, mostly targeting free-threaded builds
- Support for numpy arrays and template strings (PEP 750) when available
- Blacklisting system to filter out dangerous or irrelevant functions and modules
- Resource monitoring and timeout handling
- Configurable fuzzing parameters (function calls, methods, classes, objects)

The fuzzer generates Python source code that imports target modules and executes
randomized function calls, capturing crashes and unexpected behaviors for analysis.
It's particularly effective at finding issues in C extension modules where memory
safety bugs are more common. Stressing and exercising the core interpreter can
also find crashes.

Usage:
    python fusil-python-threaded [options]

Example:
    python fusil-python-threaded --only-c --timeout 300 --modules json,sqlite3
"""

from __future__ import annotations

import warnings

# Hide Python deprecation warnings coming from ptrace
with warnings.catch_warnings(action="ignore"):
    from fusil.python import Fuzzer
    from fusil.python.utils import remove_logging_pycache

if __name__ == "__main__":
    remove_logging_pycache()
    Fuzzer().main()
